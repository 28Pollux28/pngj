PNGJ:  Release Notes  & History
==============================================================================

Version 0.94 (12 Aug 2012) 
  - Defensive limits and related tuning in PngReader 
   -- Added: maxTotalBytesRead (200MB), maxBytesMetadata (5MB), skipChunkMaxSize (2MB) skipChunkIds ( "fdAT" )
   -- APGN is now "rightly unsupported" :-)
   -- PngChunkSkipped : now skipped chunks are really skipped (never loaded in memory)  All skipped chunks (for any criteria) are loaded in ChunksLists as a PngChunkSkipped
   -- Several related polishing in PngReader (parseChunkAndAddToList() removed, readChunk() added)
	 -- 'offset' added in chunks (mainly informational)
	 -- 'offset' in PngReader: now a long (to support greater than 2GB files), updated and checked against maxTotalBytesRead
  - Added sample: SampleCustomChunk , shows how to register a custom chunk	    
  - Some fixes for very huge (more than 2GB) files - sample: CreateVeryHuge.java
  
Version 0.93 (22 June 2012) 
  - PngReader.getRow() allows non sequential reading  (useful for skipping lines)
  - PngReader.end() is no longer deprecated but recommended (related to the previous)
  - some more polishing and some renaming: ImageLine.tf_pack -> ImageLine.pack (what was I thinking?), FilterType.ALTERNATE -> CYCLIC
  - ImageLine.pack()/ ImageLine.unpack() was requiring/returning a buffer of length greater than cols*nchannels - fixed
  - Added PngWriter.computeCompressionRatio() 
  - Added a Neural Network Color Quantizer in test package, see SampleConvertPalette for example of use

Version 0.91  (?)
  - Added 2 chunks from Extensions to the PNG 1.2 Specification: sTER and oFFs
  - Added PngChunks.factoryRegister() and some other minor chunks changes ( PngChunkXXX.ID) 
  - Some polishing of test package -  renamed sample classes to Sample* - added TestSpeed to compare with C# port
  - PngReader emits warning (and ignores more chunk data) instead of dying when too much bytes in chunks
  - Some chunks polishing and internal methods  added reorganized 

Version 0.9  (14 April 2012)
---------------------------
  - Chunks API reorganization: PngChunkMultiple/Single, ChunksListForWrite, ChunkPredicate...
  - ChunksListForWrite.getQueuedById and similar methods
  - PngReader.end() no more necessary: it's called automatically after reading the last row
  - PngWriter: user can set idatMaxSize (default increased to 32K)
  - Small optimizations in PngWriter
  - PngHelper -> PngHelperInternal
 
Version 0.85  (1 April 2012)
---------------------------
 - More robust Chunk management (ChunkGroup is now inside PngChunk; both PngReader and PngWriter have a ChunkList...)    
 - PngMetadata: both  PngReader and PngWriter have an instance to deal with metadata (chunks) at high level. eg: setDpi()/getDpi 
 - Added sPLT chunk
 - The test of all testsuite images now copies all chunks ok.
 - Deprecated Pngwrite.writeRow(ImageLine), use better Pngwrite.writeRow(ImageLine,rown)
 - remove PngReader.foundChunksInfo 
  
Version 0.80  (28 March 2012)
---------------------------
 - Roll back auto increment of ImageLine rownumber at writing. Define some new PngWrite.writeLine() methods with slight change in semantics  
 - Fix bad chunk-id in PngChunkITXT
 
Version 0.71  (March 2012)
---------------------------
 - Full support for all Chunk types (bKGD CHRM ICCP ITXT TRNS ZTXT - some yet untested)  
 - ar.com.hjg.pngj.nosandbox is now empty: PngFileHelper is back to main jar
 - Lossy compression ar.com.hjg.pngj.lossy - (very EXPERIMENTAL yet, undocumented, lots of rough edges) 

Version 0.62  (Jun 2011)
-----------------------
- Added Javadocs
- Implemented ImageLineHelper.tf_palIdx2RGB()
- Several code and comment polishing

Version 0.61  (Jun 2011)
-----------------------
- Better PNG filter strategies (different filters in same writer).
- Fixed issue with compression level (zip stream), it had no effect before.
- More chunks implemented (cHRM  , sRGB , sBIT)
- Restricted visibility of some methods/fields

Version 0.6  (May 2011)
-----------------------
- Full support for indexed and grayscale, with  any bitdepth 
- The only non supported PNG images are the interlaced now.
- Chunk management fully reimplemented. (package ar.hjg.com.png.chunks)
- Decouple google-appengine-unfriendy code in package   
 ar.com.hjg.pngj.nosandbox package. See PngFileHelper.
- Constructors PngReader/PngWriter now use streams. See factory methods 
in ar.com.hjg.pngj.nosandbox.PngFileHelper if you want to use files.
- Added test images from PNG suite - see MirrorTest
- Polished code, translated some spanish comments 

Version 0.2  (Apr 2011)
-----------------------
- Issue with extra trailing IDAT chunks fixed.  

Version 0.1  (January 2009)
---------------------------
- Full reading/writing capabilities for truecolor formats: RGB/RGBA , 8 and 16 bpp
- Other formats: paletted and grayscale images implemented (almost no testing), 
only with 8bitdepth resolution (1,2,4 bits not implemented). 
- Palette handling: very rudimentary: PngReader only reads the raw chunk and 
PngWriter -if applicable- writes it back.
- Special color transformations (ICC) : unvisible for the API. The chunks are
read and write 'raw'. 
- Special chunks: limited support for Physical resolution (DPI) and textual chunks.
All other ancillary chunks are blindly read and write.


Feedback:
--------

http://code.google.com/p/pngj

Hernan J. Gonzalez
hgonzalez@gmail.com
